# -*- coding: utf-8 -*-
"""problem2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W-sX44MacgiakFBXmhX-u1kKnvlVn-sm
"""

from tensorflow import keras
from keras.datasets import cifar10
from keras.utils import to_categorical
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = to_categorical(y_train,10)
y_test = to_categorical(y_test,10)

model = keras.Sequential()

model.add(keras.layers.Conv2D(64, 3, input_shape=(32,32,3), activation='relu'))
model.add(keras.layers.MaxPool2D())


model.add(keras.layers.Conv2D(128, 3, activation='relu'))
model.add(keras.layers.Conv2D(128, 3, activation='relu', padding='same'))
model.add(keras.layers.MaxPool2D())


model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Conv2D(128, 3, activation='relu', padding='same')) #+
model.add(keras.layers.Conv2D(256, 3, activation='relu', padding='same')) #128
model.add(keras.layers.Conv2D(256, 3, activation='relu', kernel_regularizer=keras.regularizers.l1(0.01), activity_regularizer=keras.regularizers.l2(0.1))) #0.01
model.add(keras.layers.MaxPool2D()) 

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(128,'relu'))
model.add(keras.layers.Dense(32,'relu'))
model.add(keras.layers.Dense(10,'softmax'))

model.summary()

opt = keras.optimizers.Adam(lr=0.0001, decay=0.0)
model.compile(loss = 'categorical_crossentropy', optimizer=opt,  metrics=['accuracy', keras.metrics.Recall(), keras.metrics.Precision()])
history = model.fit(x_train, y_train, validation_data=(x_test, y_test),batch_size=5 ,epochs=80)

model.save('cifar10model.h5')

plt.plot(history.history['loss'],color="blue")
plt.plot(history.history['val_loss'],color="green")
plt.title("loss")
plt.show()

plt.plot(history.history['accuracy'],color="blue")
plt.plot(history.history['val_accuracy'],color="green")
plt.title("accuracy")
plt.show()

plt.plot(history.history['recall_1'],color="blue")
plt.plot(history.history['val_recall_1'],color="green")
plt.title("recall")
plt.show()

plt.plot(history.history['precision_1'],color="blue")
plt.plot(history.history['val_precision_1'],color="green")
plt.title("precision")
plt.show()

prediction = model.predict(x_test)
score = model.evaluate(x_test,y_test)